// de821dc7d4096b3ca8213a81c5068c10 Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE ControlDevice_cpp

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp49
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp115
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp215
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp231
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp250
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp325
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp330
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp340
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp345
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp387
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp448
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp492
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp523
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp574
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp586
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp602
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp610
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp621
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp629
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp649
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp655
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp663
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp673
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp690
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp702
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp713
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp737
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp743
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp751
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp759
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp769
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp782
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp788
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp792
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp802
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp813
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp827
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp836
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp907
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp916
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp924
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp997
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1004
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1008
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1013
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1019
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1035
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1041
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1045
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1051
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1057
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1061
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1067
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1096
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1118
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1126
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1132
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1144
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1153
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1167
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1212
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1220
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1228
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1235
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1241
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1247
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_ControlDevice_cpp1259
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp49_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0%!FUNC! Cannot allocate DeviceInit\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp49_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0%!FUNC! Cannot allocate DeviceInit\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp49
# define WPP_ANNOTATE_ControlDevice_cpp49 WPP_ANNOTATE_ControlDevice_cpp49_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp49
# define WPP_ANNOTATE_ControlDevice_cpp49 WPP_ANNOTATE_ControlDevice_cpp49_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp49", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp49

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp115_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0Wrong IoControlCode 0x%10!X!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp115_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0Wrong IoControlCode 0x%10!X!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp115
# define WPP_ANNOTATE_ControlDevice_cpp115 WPP_ANNOTATE_ControlDevice_cpp115_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp115
# define WPP_ANNOTATE_ControlDevice_cpp115 WPP_ANNOTATE_ControlDevice_cpp115_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp115", \
    L"{", \
    L"IoControlCode, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp115

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp215_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0%!FUNC! Failed to fetch output buffer. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp215_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0%!FUNC! Failed to fetch output buffer. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp215
# define WPP_ANNOTATE_ControlDevice_cpp215 WPP_ANNOTATE_ControlDevice_cpp215_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp215
# define WPP_ANNOTATE_ControlDevice_cpp215 WPP_ANNOTATE_ControlDevice_cpp215_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp215", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp215

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp231_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0%!FUNC! Fail with code: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp231_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0%!FUNC! Fail with code: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp231
# define WPP_ANNOTATE_ControlDevice_cpp231 WPP_ANNOTATE_ControlDevice_cpp231_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp231
# define WPP_ANNOTATE_ControlDevice_cpp231 WPP_ANNOTATE_ControlDevice_cpp231_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp231", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp231

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp250_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%!FUNC! Fail with code: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp250_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0%!FUNC! Fail with code: %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp250
# define WPP_ANNOTATE_ControlDevice_cpp250 WPP_ANNOTATE_ControlDevice_cpp250_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp250
# define WPP_ANNOTATE_ControlDevice_cpp250 WPP_ANNOTATE_ControlDevice_cpp250_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp250", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp250

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0checking old hide rules %10!X!:%11!X!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0checking old hide rules %10!X!:%11!X!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp325
# define WPP_ANNOTATE_ControlDevice_cpp325 WPP_ANNOTATE_ControlDevice_cpp325_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp325
# define WPP_ANNOTATE_ControlDevice_cpp325 WPP_ANNOTATE_ControlDevice_cpp325_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp325", \
    L"{", \
    L"DevDescriptor.idVendor, ItemLong -- 10" , \
    L"DevDescriptor.idProduct, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp325

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp330_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0Match: hide = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp330_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0Match: hide = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp330
# define WPP_ANNOTATE_ControlDevice_cpp330 WPP_ANNOTATE_ControlDevice_cpp330_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp330
# define WPP_ANNOTATE_ControlDevice_cpp330 WPP_ANNOTATE_ControlDevice_cpp330_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp330", \
    L"{", \
    L"Hide, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp330

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp340_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0checking ext hide rules %10!X!:%11!X!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp340_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0checking ext hide rules %10!X!:%11!X!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp340
# define WPP_ANNOTATE_ControlDevice_cpp340 WPP_ANNOTATE_ControlDevice_cpp340_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp340
# define WPP_ANNOTATE_ControlDevice_cpp340 WPP_ANNOTATE_ControlDevice_cpp340_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp340", \
    L"{", \
    L"DevDescriptor.idVendor, ItemLong -- 10" , \
    L"DevDescriptor.idProduct, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp340

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp345_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0Match: hide = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp345_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0Match: hide = %10!d!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FILTERDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp345
# define WPP_ANNOTATE_ControlDevice_cpp345 WPP_ANNOTATE_ControlDevice_cpp345_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp345
# define WPP_ANNOTATE_ControlDevice_cpp345 WPP_ANNOTATE_ControlDevice_cpp345_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp345", \
    L"{", \
    L"Hide, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp345

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp387_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0%!FUNC! FAILED! Number existing devices is more than allocated buffer!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp387_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0%!FUNC! FAILED! Number existing devices is more than allocated buffer!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp387
# define WPP_ANNOTATE_ControlDevice_cpp387 WPP_ANNOTATE_ControlDevice_cpp387_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp387
# define WPP_ANNOTATE_ControlDevice_cpp387 WPP_ANNOTATE_ControlDevice_cpp387_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp387", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp387

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp448_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0%!FUNC! PDO was not found\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp448_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0%!FUNC! PDO was not found\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp448
# define WPP_ANNOTATE_ControlDevice_cpp448 WPP_ANNOTATE_ControlDevice_cpp448_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp448
# define WPP_ANNOTATE_ControlDevice_cpp448 WPP_ANNOTATE_ControlDevice_cpp448_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp448", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp448

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp492_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp492_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp492
# define WPP_ANNOTATE_ControlDevice_cpp492 WPP_ANNOTATE_ControlDevice_cpp492_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp492
# define WPP_ANNOTATE_ControlDevice_cpp492 WPP_ANNOTATE_ControlDevice_cpp492_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp492", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp492

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp523_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0%!FUNC! Hider device allocation failed\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp523_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0%!FUNC! Hider device allocation failed\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp523
# define WPP_ANNOTATE_ControlDevice_cpp523 WPP_ANNOTATE_ControlDevice_cpp523_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp523
# define WPP_ANNOTATE_ControlDevice_cpp523 WPP_ANNOTATE_ControlDevice_cpp523_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp523", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp523

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp574_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0%!FUNC! UsbDkCreateCurrentProcessHandle failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp574_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0%!FUNC! UsbDkCreateCurrentProcessHandle failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp574
# define WPP_ANNOTATE_ControlDevice_cpp574 WPP_ANNOTATE_ControlDevice_cpp574_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp574
# define WPP_ANNOTATE_ControlDevice_cpp574 WPP_ANNOTATE_ControlDevice_cpp574_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp574", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp574

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp586_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0%!FUNC! WdfDeviceEnqueueRequest failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp586_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0%!FUNC! WdfDeviceEnqueueRequest failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp586
# define WPP_ANNOTATE_ControlDevice_cpp586 WPP_ANNOTATE_ControlDevice_cpp586_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp586
# define WPP_ANNOTATE_ControlDevice_cpp586 WPP_ANNOTATE_ControlDevice_cpp586_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp586", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp586

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp602_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0%!FUNC! FetchInputObject failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp602_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0%!FUNC! FetchInputObject failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp602
# define WPP_ANNOTATE_ControlDevice_cpp602 WPP_ANNOTATE_ControlDevice_cpp602_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp602
# define WPP_ANNOTATE_ControlDevice_cpp602 WPP_ANNOTATE_ControlDevice_cpp602_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp602", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp602

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp610_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0%!FUNC! Wrong request buffer size (%10!I64u!, expected %11!I64u!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp610_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0%!FUNC! Wrong request buffer size (%10!I64u!, expected %11!I64u!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp610
# define WPP_ANNOTATE_ControlDevice_cpp610 WPP_ANNOTATE_ControlDevice_cpp610_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp610
# define WPP_ANNOTATE_ControlDevice_cpp610 WPP_ANNOTATE_ControlDevice_cpp610_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp610", \
    L"{", \
    L"DeviceIdLen, ItemULongLong -- 10" , \
    L"sizeof(USB_DK_DEVICE_ID), ItemULongLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp610

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp621_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0%!FUNC! Failed to fetch output buffer. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp621_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0%!FUNC! Failed to fetch output buffer. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp621
# define WPP_ANNOTATE_ControlDevice_cpp621 WPP_ANNOTATE_ControlDevice_cpp621_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp621
# define WPP_ANNOTATE_ControlDevice_cpp621 WPP_ANNOTATE_ControlDevice_cpp621_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp621", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp621

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp629_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0%!FUNC! Wrong request input buffer size (%10!I64u!, expected %11!I64u!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp629_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0%!FUNC! Wrong request input buffer size (%10!I64u!, expected %11!I64u!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_REDIRECTOR" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp629
# define WPP_ANNOTATE_ControlDevice_cpp629 WPP_ANNOTATE_ControlDevice_cpp629_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemULongLong -- 10" , \
    L"Arg, ItemULongLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp629
# define WPP_ANNOTATE_ControlDevice_cpp629 WPP_ANNOTATE_ControlDevice_cpp629_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp629", \
    L"{", \
    L"RedirectorDeviceLength, ItemULongLong -- 10" , \
    L"sizeof(ULONG64), ItemULongLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp629

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp649_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0%!FUNC! creating control device\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp649_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0%!FUNC! creating control device\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp649
# define WPP_ANNOTATE_ControlDevice_cpp649 WPP_ANNOTATE_ControlDevice_cpp649_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp649
# define WPP_ANNOTATE_ControlDevice_cpp649 WPP_ANNOTATE_ControlDevice_cpp649_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp649", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp649

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp655_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0%!FUNC! cannot allocate control device\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp655_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0%!FUNC! cannot allocate control device\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp655
# define WPP_ANNOTATE_ControlDevice_cpp655 WPP_ANNOTATE_ControlDevice_cpp655_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp655
# define WPP_ANNOTATE_ControlDevice_cpp655 WPP_ANNOTATE_ControlDevice_cpp655_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp655", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp655

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp663_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0%!FUNC! cannot create control device %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp663_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0%!FUNC! cannot create control device %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp663
# define WPP_ANNOTATE_ControlDevice_cpp663 WPP_ANNOTATE_ControlDevice_cpp663_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp663
# define WPP_ANNOTATE_ControlDevice_cpp663 WPP_ANNOTATE_ControlDevice_cpp663_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp663", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp663

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp673_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0%!FUNC! cannot register control device %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp673_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0%!FUNC! cannot register control device %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp673
# define WPP_ANNOTATE_ControlDevice_cpp673 WPP_ANNOTATE_ControlDevice_cpp673_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp673
# define WPP_ANNOTATE_ControlDevice_cpp673 WPP_ANNOTATE_ControlDevice_cpp673_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp673", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp673

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp690_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0%!FUNC! Cannot allocate control device holder\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp690_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0%!FUNC! Cannot allocate control device holder\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp690
# define WPP_ANNOTATE_ControlDevice_cpp690 WPP_ANNOTATE_ControlDevice_cpp690_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp690
# define WPP_ANNOTATE_ControlDevice_cpp690 WPP_ANNOTATE_ControlDevice_cpp690_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp690", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp690

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp702_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%!FUNC! Roll-back failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp702_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0%!FUNC! Roll-back failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp702
# define WPP_ANNOTATE_ControlDevice_cpp702 WPP_ANNOTATE_ControlDevice_cpp702_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp702
# define WPP_ANNOTATE_ControlDevice_cpp702 WPP_ANNOTATE_ControlDevice_cpp702_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp702", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp702

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp713_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0%!FUNC! Roll-back reset failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp713_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0%!FUNC! Roll-back reset failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp713
# define WPP_ANNOTATE_ControlDevice_cpp713 WPP_ANNOTATE_ControlDevice_cpp713_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp713
# define WPP_ANNOTATE_ControlDevice_cpp713 WPP_ANNOTATE_ControlDevice_cpp713_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp713", \
    L"{", \
    L"resetRes, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp713

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp737_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0%!FUNC! Success. New redirections list:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp737_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0%!FUNC! Success. New redirections list:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp737
# define WPP_ANNOTATE_ControlDevice_cpp737 WPP_ANNOTATE_ControlDevice_cpp737_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp737
# define WPP_ANNOTATE_ControlDevice_cpp737 WPP_ANNOTATE_ControlDevice_cpp737_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp737", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp737

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp743_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0%!FUNC! Reset after start redirection failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp743_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0%!FUNC! Reset after start redirection failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp743
# define WPP_ANNOTATE_ControlDevice_cpp743 WPP_ANNOTATE_ControlDevice_cpp743_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp743
# define WPP_ANNOTATE_ControlDevice_cpp743 WPP_ANNOTATE_ControlDevice_cpp743_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp743", \
    L"{", \
    L"resetRes, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp743

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp751_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0%!FUNC! Wait for redirector attachment failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp751_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0%!FUNC! Wait for redirector attachment failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp751
# define WPP_ANNOTATE_ControlDevice_cpp751 WPP_ANNOTATE_ControlDevice_cpp751_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp751
# define WPP_ANNOTATE_ControlDevice_cpp751 WPP_ANNOTATE_ControlDevice_cpp751_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp751", \
    L"{", \
    L"waitRes, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp751

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp759_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0%!FUNC! CreateRedirectorHandle() failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp759_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0%!FUNC! CreateRedirectorHandle() failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp759
# define WPP_ANNOTATE_ControlDevice_cpp759 WPP_ANNOTATE_ControlDevice_cpp759_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp759
# define WPP_ANNOTATE_ControlDevice_cpp759 WPP_ANNOTATE_ControlDevice_cpp759_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp759", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp759

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp769_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0%!FUNC! entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp769_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0%!FUNC! entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp769
# define WPP_ANNOTATE_ControlDevice_cpp769 WPP_ANNOTATE_ControlDevice_cpp769_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp769
# define WPP_ANNOTATE_ControlDevice_cpp769 WPP_ANNOTATE_ControlDevice_cpp769_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp769", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp769

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp782_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0%!FUNC! Failed to allocate new rule\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp782_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0%!FUNC! Failed to allocate new rule\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp782
# define WPP_ANNOTATE_ControlDevice_cpp782 WPP_ANNOTATE_ControlDevice_cpp782_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp782
# define WPP_ANNOTATE_ControlDevice_cpp782 WPP_ANNOTATE_ControlDevice_cpp782_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp782", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp782

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp788_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0%!FUNC! failed. Hide rule already present.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp788_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0%!FUNC! failed. Hide rule already present.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp788
# define WPP_ANNOTATE_ControlDevice_cpp788 WPP_ANNOTATE_ControlDevice_cpp788_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp788
# define WPP_ANNOTATE_ControlDevice_cpp788 WPP_ANNOTATE_ControlDevice_cpp788_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp788", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp788

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp792_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0%!FUNC! Current hide rules:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp792_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0%!FUNC! Current hide rules:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp792
# define WPP_ANNOTATE_ControlDevice_cpp792 WPP_ANNOTATE_ControlDevice_cpp792_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp792
# define WPP_ANNOTATE_ControlDevice_cpp792 WPP_ANNOTATE_ControlDevice_cpp792_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp792", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp792

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp802_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0%!FUNC! All dynamic hide rules dropped.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp802_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0%!FUNC! All dynamic hide rules dropped.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp802
# define WPP_ANNOTATE_ControlDevice_cpp802 WPP_ANNOTATE_ControlDevice_cpp802_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp802
# define WPP_ANNOTATE_ControlDevice_cpp802 WPP_ANNOTATE_ControlDevice_cpp802_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp802", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp802

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp813_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0%!FUNC! Driver parameters registry key path not available.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp813_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0%!FUNC! Driver parameters registry key path not available.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp813
# define WPP_ANNOTATE_ControlDevice_cpp813 WPP_ANNOTATE_ControlDevice_cpp813_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp813
# define WPP_ANNOTATE_ControlDevice_cpp813 WPP_ANNOTATE_ControlDevice_cpp813_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp813", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp813

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp827_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%!FUNC! Failed to allocate path to hide rules registry key.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp827_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0%!FUNC! Failed to allocate path to hide rules registry key.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp827
# define WPP_ANNOTATE_ControlDevice_cpp827 WPP_ANNOTATE_ControlDevice_cpp827_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp827
# define WPP_ANNOTATE_ControlDevice_cpp827 WPP_ANNOTATE_ControlDevice_cpp827_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp827", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp827

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp836_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0%!FUNC! Failed to open hide rules registry key.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp836_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0%!FUNC! Failed to open hide rules registry key.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp836
# define WPP_ANNOTATE_ControlDevice_cpp836 WPP_ANNOTATE_ControlDevice_cpp836_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp836
# define WPP_ANNOTATE_ControlDevice_cpp836 WPP_ANNOTATE_ControlDevice_cpp836_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp836", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp836

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp907_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0%!FUNC! Failed to query value %10!s! (status %11!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp907_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0%!FUNC! Failed to query value %10!s! (status %11!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp907
# define WPP_ANNOTATE_ControlDevice_cpp907 WPP_ANNOTATE_ControlDevice_cpp907_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPWString -- 10" , \
    L"Arg, ItemNTSTATUS -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp907
# define WPP_ANNOTATE_ControlDevice_cpp907 WPP_ANNOTATE_ControlDevice_cpp907_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp907", \
    L"{", \
    L"ValueNameHolder, ItemPWString -- 10" , \
    L"status, ItemNTSTATUS -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp907

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp916_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0%!FUNC! Wrong data type for value %10!s!: %11!d!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp916_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0%!FUNC! Wrong data type for value %10!s!: %11!d!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp916
# define WPP_ANNOTATE_ControlDevice_cpp916 WPP_ANNOTATE_ControlDevice_cpp916_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPWString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp916
# define WPP_ANNOTATE_ControlDevice_cpp916 WPP_ANNOTATE_ControlDevice_cpp916_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp916", \
    L"{", \
    L"ValueNameHolder, ItemPWString -- 10" , \
    L"Info->Type, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp916

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp924_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0%!FUNC! Wrong data length for value %10!s!: %11!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp924_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0%!FUNC! Wrong data length for value %10!s!: %11!u!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp924
# define WPP_ANNOTATE_ControlDevice_cpp924 WPP_ANNOTATE_ControlDevice_cpp924_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPWString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp924
# define WPP_ANNOTATE_ControlDevice_cpp924 WPP_ANNOTATE_ControlDevice_cpp924_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp924", \
    L"{", \
    L"ValueNameHolder, ItemPWString -- 10" , \
    L"Info->DataLength, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp924

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp997_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0%!FUNC! failed. Cannot allocate redirection.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp997_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0%!FUNC! failed. Cannot allocate redirection.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp997
# define WPP_ANNOTATE_ControlDevice_cpp997 WPP_ANNOTATE_ControlDevice_cpp997_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp997
# define WPP_ANNOTATE_ControlDevice_cpp997 WPP_ANNOTATE_ControlDevice_cpp997_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp997", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp997

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1004_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0%!FUNC! failed. Cannot create redirection.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1004_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0%!FUNC! failed. Cannot create redirection.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1004
# define WPP_ANNOTATE_ControlDevice_cpp1004 WPP_ANNOTATE_ControlDevice_cpp1004_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1004
# define WPP_ANNOTATE_ControlDevice_cpp1004 WPP_ANNOTATE_ControlDevice_cpp1004_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1004", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1004

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1008_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0%!FUNC! Adding new redirection\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1008_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0%!FUNC! Adding new redirection\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1008
# define WPP_ANNOTATE_ControlDevice_cpp1008 WPP_ANNOTATE_ControlDevice_cpp1008_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1008
# define WPP_ANNOTATE_ControlDevice_cpp1008 WPP_ANNOTATE_ControlDevice_cpp1008_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1008", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1008

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1013_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0%!FUNC! failed. Cannot redirect unknown device.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1013_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0%!FUNC! failed. Cannot redirect unknown device.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1013
# define WPP_ANNOTATE_ControlDevice_cpp1013 WPP_ANNOTATE_ControlDevice_cpp1013_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1013
# define WPP_ANNOTATE_ControlDevice_cpp1013 WPP_ANNOTATE_ControlDevice_cpp1013_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1013", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1013

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1019_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0%!FUNC! failed. Device already redirected.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1019_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0%!FUNC! failed. Device already redirected.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1019
# define WPP_ANNOTATE_ControlDevice_cpp1019 WPP_ANNOTATE_ControlDevice_cpp1019_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1019
# define WPP_ANNOTATE_ControlDevice_cpp1019 WPP_ANNOTATE_ControlDevice_cpp1019_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1019", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1019

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1035_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0%!FUNC! Waiting for detachment from %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1035_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0%!FUNC! Waiting for detachment from %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1035
# define WPP_ANNOTATE_ControlDevice_cpp1035 WPP_ANNOTATE_ControlDevice_cpp1035_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemWString -- 10" , \
    L"Arg, ItemWString -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1035
# define WPP_ANNOTATE_ControlDevice_cpp1035 WPP_ANNOTATE_ControlDevice_cpp1035_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1035", \
    L"{", \
    L"DeviceId.DeviceID, ItemWString -- 10" , \
    L"DeviceId.InstanceID, ItemWString -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1035

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1041_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0%!FUNC! Wait for redirector detachment failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1041_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0%!FUNC! Wait for redirector detachment failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1041
# define WPP_ANNOTATE_ControlDevice_cpp1041 WPP_ANNOTATE_ControlDevice_cpp1041_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1041
# define WPP_ANNOTATE_ControlDevice_cpp1041 WPP_ANNOTATE_ControlDevice_cpp1041_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1041", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1041

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1045_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0%!FUNC! Detached from %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1045_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0%!FUNC! Detached from %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1045
# define WPP_ANNOTATE_ControlDevice_cpp1045 WPP_ANNOTATE_ControlDevice_cpp1045_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemWString -- 10" , \
    L"Arg, ItemWString -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1045
# define WPP_ANNOTATE_ControlDevice_cpp1045 WPP_ANNOTATE_ControlDevice_cpp1045_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1045", \
    L"{", \
    L"DeviceId.DeviceID, ItemWString -- 10" , \
    L"DeviceId.InstanceID, ItemWString -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1045

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1051_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0%!FUNC! Usb device reset failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1051_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0%!FUNC! Usb device reset failed.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1051
# define WPP_ANNOTATE_ControlDevice_cpp1051 WPP_ANNOTATE_ControlDevice_cpp1051_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1051
# define WPP_ANNOTATE_ControlDevice_cpp1051 WPP_ANNOTATE_ControlDevice_cpp1051_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1051", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1051

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0%!FUNC! No such redirection registered.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0%!FUNC! No such redirection registered.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1057
# define WPP_ANNOTATE_ControlDevice_cpp1057 WPP_ANNOTATE_ControlDevice_cpp1057_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1057
# define WPP_ANNOTATE_ControlDevice_cpp1057 WPP_ANNOTATE_ControlDevice_cpp1057_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1057", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1057

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1061_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0%!FUNC! Finished successfully. New redirections list:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1061_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0%!FUNC! Finished successfully. New redirections list:\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1061
# define WPP_ANNOTATE_ControlDevice_cpp1061 WPP_ANNOTATE_ControlDevice_cpp1061_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1061
# define WPP_ANNOTATE_ControlDevice_cpp1061 WPP_ANNOTATE_ControlDevice_cpp1061_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1061", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1061

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1067_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%!FUNC! failed for %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1067_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0%!FUNC! failed for %10!s!:%11!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1067
# define WPP_ANNOTATE_ControlDevice_cpp1067 WPP_ANNOTATE_ControlDevice_cpp1067_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemWString -- 10" , \
    L"Arg, ItemWString -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1067
# define WPP_ANNOTATE_ControlDevice_cpp1067 WPP_ANNOTATE_ControlDevice_cpp1067_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1067", \
    L"{", \
    L"DeviceId.DeviceID, ItemWString -- 10" , \
    L"DeviceId.InstanceID, ItemWString -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1067

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1096_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0%!FUNC! object was not found.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1096_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0%!FUNC! object was not found.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1096
# define WPP_ANNOTATE_ControlDevice_cpp1096 WPP_ANNOTATE_ControlDevice_cpp1096_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1096
# define WPP_ANNOTATE_ControlDevice_cpp1096 WPP_ANNOTATE_ControlDevice_cpp1096_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1096", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1096

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1118_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0%!FUNC! %10!s! DevID: %11!s!, InstanceID: %12!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1118_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0%!FUNC! %10!s! DevID: %11!s!, InstanceID: %12!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1118
# define WPP_ANNOTATE_ControlDevice_cpp1118 WPP_ANNOTATE_ControlDevice_cpp1118_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemPWString -- 11" , \
    L"Arg, ItemPWString -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1118
# define WPP_ANNOTATE_ControlDevice_cpp1118 WPP_ANNOTATE_ControlDevice_cpp1118_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1118", \
    L"{", \
    L"message, ItemString -- 10" , \
    L"m_DeviceID, ItemPWString -- 11" , \
    L"m_InstanceID, ItemPWString -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1118

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1126_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0%!FUNC! pid 0x%10!X!, owner 0x%11!X!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1126_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0%!FUNC! pid 0x%10!X!, owner 0x%11!X!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1126
# define WPP_ANNOTATE_ControlDevice_cpp1126 WPP_ANNOTATE_ControlDevice_cpp1126_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1126
# define WPP_ANNOTATE_ControlDevice_cpp1126 WPP_ANNOTATE_ControlDevice_cpp1126_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1126", \
    L"{", \
    L"pid, ItemLong -- 10" , \
    L"m_OwnerPid, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1126

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1132_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%!FUNC! Redirector created for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1132_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0%!FUNC! Redirector created for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1132
# define WPP_ANNOTATE_ControlDevice_cpp1132 WPP_ANNOTATE_ControlDevice_cpp1132_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1132
# define WPP_ANNOTATE_ControlDevice_cpp1132 WPP_ANNOTATE_ControlDevice_cpp1132_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1132", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1132

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1144_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0%!FUNC! Raising redirection removal event for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1144_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0%!FUNC! Raising redirection removal event for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1144
# define WPP_ANNOTATE_ControlDevice_cpp1144 WPP_ANNOTATE_ControlDevice_cpp1144_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1144
# define WPP_ANNOTATE_ControlDevice_cpp1144 WPP_ANNOTATE_ControlDevice_cpp1144_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1144", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1144

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1153_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0%!FUNC! Redirector removal started for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1153_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0%!FUNC! Redirector removal started for\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1153
# define WPP_ANNOTATE_ControlDevice_cpp1153 WPP_ANNOTATE_ControlDevice_cpp1153_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1153
# define WPP_ANNOTATE_ControlDevice_cpp1153 WPP_ANNOTATE_ControlDevice_cpp1153_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1153", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1153

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1167_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0%!FUNC! Wait of RedirectionRemoved event failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1167_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0%!FUNC! Wait of RedirectionRemoved event failed. %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1167
# define WPP_ANNOTATE_ControlDevice_cpp1167 WPP_ANNOTATE_ControlDevice_cpp1167_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1167
# define WPP_ANNOTATE_ControlDevice_cpp1167 WPP_ANNOTATE_ControlDevice_cpp1167_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1167", \
    L"{", \
    L"waitRes, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1167

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1212_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0%!FUNC!: device already marked for removal\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1212_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0%!FUNC!: device already marked for removal\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1212
# define WPP_ANNOTATE_ControlDevice_cpp1212 WPP_ANNOTATE_ControlDevice_cpp1212_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1212
# define WPP_ANNOTATE_ControlDevice_cpp1212 WPP_ANNOTATE_ControlDevice_cpp1212_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1212", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1212

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1220_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0%!FUNC! done for process 0x%10!X!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1220_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0%!FUNC! done for process 0x%10!X!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1220
# define WPP_ANNOTATE_ControlDevice_cpp1220 WPP_ANNOTATE_ControlDevice_cpp1220_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1220
# define WPP_ANNOTATE_ControlDevice_cpp1220 WPP_ANNOTATE_ControlDevice_cpp1220_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1220", \
    L"{", \
    L"pid, ItemLong -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1220

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1228_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0%!FUNC! failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1228_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0%!FUNC! failed, %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_WDFDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1228
# define WPP_ANNOTATE_ControlDevice_cpp1228 WPP_ANNOTATE_ControlDevice_cpp1228_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1228
# define WPP_ANNOTATE_ControlDevice_cpp1228 WPP_ANNOTATE_ControlDevice_cpp1228_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1228", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1228

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1235_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0%!FUNC! Hide: %10!s!, C: %11!08X!, V: %12!08X!, P: %13!08X!, BCD: %14!08X!\" //   LEVEL=traceLevel FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1235_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0%!FUNC! Hide: %10!s!, C: %11!08X!, V: %12!08X!, P: %13!08X!, BCD: %14!08X!\" //   LEVEL=traceLevel FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1235
# define WPP_ANNOTATE_ControlDevice_cpp1235 WPP_ANNOTATE_ControlDevice_cpp1235_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemListLong(false,true) -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1235
# define WPP_ANNOTATE_ControlDevice_cpp1235 WPP_ANNOTATE_ControlDevice_cpp1235_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1235", \
    L"{", \
    L"m_Hide, ItemListLong(false,true) -- 10" , \
    L"m_Class, ItemLong -- 11" , \
    L"m_VID, ItemLong -- 12" , \
    L"m_PID, ItemLong -- 13" , \
    L"m_BCD, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1235

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1241_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0%!FUNC! Driver registry path: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1241_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0%!FUNC! Driver registry path: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1241
# define WPP_ANNOTATE_ControlDevice_cpp1241 WPP_ANNOTATE_ControlDevice_cpp1241_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPWString -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1241
# define WPP_ANNOTATE_ControlDevice_cpp1241 WPP_ANNOTATE_ControlDevice_cpp1241_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1241", \
    L"{", \
    L"DriverRegPath, ItemPWString -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1241

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1247_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0%!FUNC! Failed to allocate storage for parameters registry path\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1247_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0%!FUNC! Failed to allocate storage for parameters registry path\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1247
# define WPP_ANNOTATE_ControlDevice_cpp1247 WPP_ANNOTATE_ControlDevice_cpp1247_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1247
# define WPP_ANNOTATE_ControlDevice_cpp1247 WPP_ANNOTATE_ControlDevice_cpp1247_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1247", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1247

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1259_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0%!FUNC! Failed to duplicate parameters registry path\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_ControlDevice_cpp1259_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"86b5f3aa-f246-34d4-9fea-add1209d288d h_UsbDk // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0%!FUNC! Failed to duplicate parameters registry path\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_CONTROLDEVICE" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_ControlDevice_cpp1259
# define WPP_ANNOTATE_ControlDevice_cpp1259 WPP_ANNOTATE_ControlDevice_cpp1259_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_ControlDevice_cpp1259
# define WPP_ANNOTATE_ControlDevice_cpp1259 WPP_ANNOTATE_ControlDevice_cpp1259_FINAL( \
    "TMF:", \
    "ControlDevice.cpp", \
    "ControlDevice_cpp1259", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_ControlDevice_cpp1259

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_86b5f3aaf24634d49feaadd1209d288d_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x86b5f3aa,0xf246,0x34d4,{0x9f,0xea,0xad,0xd1,0x20,0x9d,0x28,0x8d}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF__def
# define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  (void*)0); }
#endif // WPP_SF__def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF__def
#define WPP_RECORDER_AND_TRACE_SF__def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                    (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF__def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_ function
//
#ifndef WPP_RECORDER_SF__def
#define WPP_RECORDER_SF__def
WPP_INLINE
VOID
WPP_RECORDER_SF_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
             (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0);
}
#endif // WPP_RECORDER_SF__def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_D_def
# define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0); }
#endif // WPP_SF_D_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_D function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_D_def
#define WPP_RECORDER_AND_TRACE_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_D(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_D_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_D function
//
#ifndef WPP_RECORDER_SF_D_def
#define WPP_RECORDER_SF_D_def
WPP_INLINE
VOID
WPP_RECORDER_SF_D(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_D_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_DD_def
# define WPP_SF_DD_def
WPP_INLINE void WPP_SF_DD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0); }
#endif // WPP_SF_DD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_DD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_DD_def
#define WPP_RECORDER_AND_TRACE_SF_DD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_DD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_DD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_DD function
//
#ifndef WPP_RECORDER_SF_DD_def
#define WPP_RECORDER_SF_DD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_DD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned int _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned int, _a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_DD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_II_def
# define WPP_SF_II_def
WPP_INLINE void WPP_SF_II(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned __int64 _a1, unsigned __int64 _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2)  (void*)0); }
#endif // WPP_SF_II_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_II function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_II_def
#define WPP_RECORDER_AND_TRACE_SF_II_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_II(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_II_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_II function
//
#ifndef WPP_RECORDER_SF_II_def
#define WPP_RECORDER_SF_II_def
WPP_INLINE
VOID
WPP_RECORDER_SF_II(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , unsigned __int64 _a1, unsigned __int64 _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(unsigned __int64, _a1) WPP_LOGTYPEVAL(unsigned __int64, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_II_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_SS_def
# define WPP_SF_SS_def
WPP_INLINE void WPP_SF_SS(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCWSTR _a1, LPCWSTR _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  (void*)0); }
#endif // WPP_SF_SS_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_SS function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_SS_def
#define WPP_RECORDER_AND_TRACE_SF_SS_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_SS(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCWSTR _a1, LPCWSTR _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_SS_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_SS function
//
#ifndef WPP_RECORDER_SF_SS_def
#define WPP_RECORDER_SF_SS_def
WPP_INLINE
VOID
WPP_RECORDER_SF_SS(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCWSTR _a1, LPCWSTR _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGWSTR(_a1) WPP_LOGWSTR(_a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_SS_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_Z_def
# define WPP_SF_Z_def
WPP_INLINE void WPP_SF_Z(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, PCUNICODE_STRING _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGPUSTR(_a1)  (void*)0); }
#endif // WPP_SF_Z_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_Z function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_Z_def
#define WPP_RECORDER_AND_TRACE_SF_Z_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_Z(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGPUSTR(_a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_Z_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_Z function
//
#ifndef WPP_RECORDER_SF_Z_def
#define WPP_RECORDER_SF_Z_def
WPP_INLINE
VOID
WPP_RECORDER_SF_Z(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGPUSTR(_a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_Z_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_ZL_def
# define WPP_SF_ZL_def
WPP_INLINE void WPP_SF_ZL(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, PCUNICODE_STRING _a1, unsigned long _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(unsigned long, _a2)  (void*)0); }
#endif // WPP_SF_ZL_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_ZL function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_ZL_def
#define WPP_RECORDER_AND_TRACE_SF_ZL_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_ZL(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1, unsigned long _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(unsigned long, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(unsigned long, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_ZL_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_ZL function
//
#ifndef WPP_RECORDER_SF_ZL_def
#define WPP_RECORDER_SF_ZL_def
WPP_INLINE
VOID
WPP_RECORDER_SF_ZL(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1, unsigned long _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(unsigned long, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(unsigned long, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_ZL_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_Zd_def
# define WPP_SF_Zd_def
WPP_INLINE void WPP_SF_Zd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, PCUNICODE_STRING _a1, signed int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0); }
#endif // WPP_SF_Zd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_Zd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_Zd_def
#define WPP_RECORDER_AND_TRACE_SF_Zd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_Zd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1, signed int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_Zd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_Zd function
//
#ifndef WPP_RECORDER_SF_Zd_def
#define WPP_RECORDER_SF_Zd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_Zd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , PCUNICODE_STRING _a1, signed int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGPUSTR(_a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_Zd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_d_def
# define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0); }
#endif // WPP_SF_d_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_d function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_d_def
#define WPP_RECORDER_AND_TRACE_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_d(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_d_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_d function
//
#ifndef WPP_RECORDER_SF_d_def
#define WPP_RECORDER_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_SF_d(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_d_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_lDDDD_def
# define WPP_SF_lDDDD_def
WPP_INLINE void WPP_SF_lDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed long _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed long, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0); }
#endif // WPP_SF_lDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_lDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_lDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_lDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_lDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed long _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed long, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed long, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_lDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_lDDDD function
//
#ifndef WPP_RECORDER_SF_lDDDD_def
#define WPP_RECORDER_SF_lDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_lDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed long _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed long, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed long, _a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_lDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sZZ_def
# define WPP_SF_sZZ_def
WPP_INLINE void WPP_SF_sZZ(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, PCUNICODE_STRING _a2, PCUNICODE_STRING _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGPUSTR(_a2) WPP_LOGPUSTR(_a3)  (void*)0); }
#endif // WPP_SF_sZZ_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sZZ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sZZ_def
#define WPP_RECORDER_AND_TRACE_SF_sZZ_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sZZ(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, PCUNICODE_STRING _a2, PCUNICODE_STRING _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGPUSTR(_a2) WPP_LOGPUSTR(_a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGPUSTR(_a2) WPP_LOGPUSTR(_a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sZZ_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sZZ function
//
#ifndef WPP_RECORDER_SF_sZZ_def
#define WPP_RECORDER_SF_sZZ_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sZZ(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, PCUNICODE_STRING _a2, PCUNICODE_STRING _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGPUSTR(_a2) WPP_LOGPUSTR(_a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGPUSTR(_a2) WPP_LOGPUSTR(_a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sZZ_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_ControlDevice_cpp49
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp49(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp49) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     10, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp49(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp49) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                10, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp49(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp49) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                10, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp115
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp115(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp115) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     11, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp115(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp115) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                11, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp115(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp115) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                11, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp215
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp215(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp215) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     12, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp215(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp215) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp215(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp215) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp231
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp231(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp231) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     13, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp231(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp231) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                13, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp231(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp231) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                13, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp250
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp250(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp250) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     14, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp250(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp250) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp250(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp250) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp325
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp325(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp325) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     15, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp325(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp325) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                15, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp325(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp325) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                15, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp330
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp330) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     16, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp330) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                16, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp330(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp330) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                16, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp340
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp340(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp340) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     17, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp340(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp340) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp340(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp340) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                17, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp345
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp345(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp345) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     18, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp345(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp345) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp345(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp345) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                18, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp387
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp387(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp387) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     19, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp387(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp387) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                19, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp387(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp387) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                19, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp448
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp448(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp448) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     20, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp448(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp448) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                20, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp448(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp448) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                20, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp492
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp492(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp492) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     21, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp492(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp492) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                21, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp492(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp492) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                21, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp523
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp523(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp523) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     22, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp523(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp523) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                22, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp523(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp523) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                22, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp574
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp574(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp574) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     23, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp574(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp574) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp574(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp574) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                23, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp586
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp586(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp586) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     24, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp586(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp586) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp586(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp586) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                24, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp602
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp602(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp602) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     25, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp602(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp602) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp602(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp602) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                25, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp610
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp610(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp610) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_II( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     26, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp610(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp610) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_II( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                26, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp610(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp610) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_II( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                26, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp621
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp621(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp621) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     27, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp621(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp621) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                27, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp621(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp621) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                27, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp629
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp629(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp629) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_II( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     28, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp629(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp629) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_II( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                28, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp629(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp629) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_II( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                28, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp649
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp649(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp649) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     29, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp649(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp649) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                29, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp649(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp649) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                29, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp655
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp655(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp655) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     30, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp655(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp655) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                30, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp655(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp655) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                30, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp663
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp663(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp663) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     31, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp663(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp663) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp663(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp663) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                31, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp673
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp673(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp673) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     32, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp673(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp673) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                32, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp673(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp673) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                32, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp690
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp690(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp690) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     33, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp690(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp690) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                33, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp690(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp690) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                33, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp702
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp702(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp702) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     34, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp702(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp702) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                34, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp702(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp702) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                34, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp713
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp713(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp713) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     35, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp713(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp713) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp713(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp713) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                35, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp737
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp737(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp737) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     36, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp737(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp737) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                36, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp737(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp737) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                36, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp743
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp743(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp743) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     37, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp743(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp743) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                37, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp743(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp743) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                37, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp751
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp751(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp751) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     38, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp751(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp751) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp751(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp751) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                38, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp759
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp759(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp759) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     39, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp759(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp759) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp759(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp759) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                39, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp769
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp769(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp769) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     40, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp769(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp769) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                40, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp769(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp769) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                40, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp782
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp782(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp782) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     41, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp782(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp782) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                41, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp782(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp782) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                41, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp788
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp788(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp788) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     42, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp788(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp788) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                42, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp788(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp788) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                42, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp792
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp792(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp792) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     43, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp792(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp792) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                43, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp792(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp792) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                43, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp802
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp802(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp802) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     44, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp802(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp802) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                44, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp802(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp802) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                44, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp813
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp813(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp813) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     45, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp813(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp813) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                45, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp813(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp813) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                45, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp827
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp827(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp827) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     46, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp827(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp827) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                46, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp827(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp827) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                46, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp836
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp836(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp836) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     47, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp836(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp836) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                47, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp836(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp836) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                47, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp907
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp907(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp907) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_Zd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     48, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp907(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp907) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_Zd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp907(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp907) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_Zd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                48, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp916
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp916(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp916) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_Zd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     49, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp916(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp916) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_Zd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                49, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp916(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp916) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_Zd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                49, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp924
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp924(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp924) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_ZL( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     50, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp924(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp924) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_ZL( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                50, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp924(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp924) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_ZL( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                50, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp997
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp997(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp997) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     51, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp997(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp997) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                51, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp997(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp997) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                51, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1004
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1004(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1004) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     52, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1004(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1004) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                52, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1004(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1004) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                52, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1008
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1008(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1008) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     53, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1008(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1008) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                53, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1008(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1008) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                53, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1013
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1013(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1013) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     54, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1013(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1013) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                54, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1013(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1013) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                54, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1019
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1019(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1019) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     55, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1019(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1019) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                55, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1019(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1019) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                55, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1035
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1035(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1035) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_SS( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     56, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1035(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1035) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_SS( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1035(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1035) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_SS( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                56, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1041
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1041(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1041) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     57, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1041(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1041) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                57, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1041(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1041) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                57, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1045
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1045(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1045) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_SS( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     58, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1045(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1045) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_SS( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                58, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1045(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1045) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_SS( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                58, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1051
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1051(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1051) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     59, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1051(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1051) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                59, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1051(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1051) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                59, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1057
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1057(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1057) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     60, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1057(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1057) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                60, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1057(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1057) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                60, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1061
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1061(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1061) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     61, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1061(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1061) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                61, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1061(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1061) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                61, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1067
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1067(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1067) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_SS( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     62, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1067(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1067) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_SS( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                62, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1067(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1067) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_SS( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                62, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1096
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1096(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1096) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     63, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1096(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1096) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1096(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1096) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                63, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1118
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1118(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1118) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sZZ( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     64, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1118(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1118) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_RECORDER_SF_sZZ( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                64, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1118(LEVEL, FLAGS, MSG, _a10, _a11, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1118) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12)), \
            WPP_SF_sZZ( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                64, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1126
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1126(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1126) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_DD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     65, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1126(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1126) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_DD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                65, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1126(LEVEL, FLAGS, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1126) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_DD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                65, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1132
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1132(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1132) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     66, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1132(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1132) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                66, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1132(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1132) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                66, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1144
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1144(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1144) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     67, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1144(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1144) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                67, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1144(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1144) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                67, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1153
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1153(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1153) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     68, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1153(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1153) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                68, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1153(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1153) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                68, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1167
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1167(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1167) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     69, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1167(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1167) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                69, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1167(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1167) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                69, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1212
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1212(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1212) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     70, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1212(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1212) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                70, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1212(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1212) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                70, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1220
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1220(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1220) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_D( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     71, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1220(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1220) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_D( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                71, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1220(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1220) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_D( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                71, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1228
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1228(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1228) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     72, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1228(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1228) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1228(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1228) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                72, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1235
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1235(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1235) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_lDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     73, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1235(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1235) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_lDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1235(LEVEL, FLAGS, MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10, _a11, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1235) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11, _a12, _a13, _a14)), \
            WPP_SF_lDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                73, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1241
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1241(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1241) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_Z( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     74, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1241(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1241) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_Z( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                74, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1241(LEVEL, FLAGS, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a10) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1241) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_Z( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                74, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1247
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1247(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1247) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     75, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1247(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1247) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                75, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1247(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1247) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                75, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_ControlDevice_cpp1259
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1259(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(ControlDevice_cpp1259) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     76, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1259(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1259) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                76, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_ControlDevice_cpp1259(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(ControlDevice_cpp1259) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                76, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef Trace
#define Trace WPP_(CALL)
#undef TraceEvents
#define TraceEvents WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

